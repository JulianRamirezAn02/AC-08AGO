<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Editor de Canvas</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 20px;
            padding: 0;
        }
        #controls {
            margin-bottom: 20px;
        }
        canvas {
            border: 1px solid black;
            display: block;
            margin: 0 auto;
        }
        .selected {
            border: 2px solid red;
        }
    </style>
</head>
<body>
    <div id="controls">
        <label for="shape">Selecciona una forma:</label>
        <select id="shape">
            <option value="rectangle">Rectángulo</option>
            <option value="circle">Círculo</option>
        </select>
        <button id="clear">Limpiar Canvas</button>
    </div>
	<div id="controls">
		<label for="">Propiedades:</label>
	</div>
	<div>
		<label for="">Ubicación X</label>
		<input type="number" id="translacionX">
		
	</div>
	<div>
		<label for="">Ubicación Y</label>
		<input type="number" id="translacionY">
		
	</div>
	<div>
		<label for="">Inclinación</label>
		<input type="number" id="rotacion" min="0" max="360">
	</div>
	<div>
		<label for="">tamaño</label>
		<input type="number" id="escalado" min="1" >
	</div>
    <canvas id="canvas" width="800" height="600"></canvas>
	<script>
        // Obtener referencias a los elementos
        const canvas = document.getElementById('canvas');
        const ctx = canvas.getContext('2d');
        const shapeSelect = document.getElementById('shape');
        const clearButton = document.getElementById('clear');
    
        // Propiedades de las figuras
        const translacionXInput = document.getElementById("translacionX");
        const translacionYInput = document.getElementById("translacionY");
        const rotacionInput = document.getElementById("rotacion");
        const escaladoInput = document.getElementById("escalado");
    
        let currentShape = 'rectangle';
        let shapes = [];
        let selectedShapeIndex = null;
    
        // Manejar la selección de formas
        shapeSelect.addEventListener('change', (e) => {
            currentShape = e.target.value;
        });
    
        // Manejar el clic en el canvas para dibujar formas
        canvas.addEventListener('click', (e) => {
            const rect = canvas.getBoundingClientRect();
            const x = e.clientX - rect.left;
            const y = e.clientY - rect.top;
    

            const translacionX = parseFloat(translacionXInput.value);
            const translacionY = parseFloat(translacionYInput.value);
            const angulo = parseFloat(rotacionInput.value);
            const escalaPercent = parseFloat(escaladoInput.value);
    
            // Aplicar translación a las coordenadas
            const translated = translaciones([x, y], [translacionX, translacionY]);
            const escaladoRectangle = escalarRectangulo([100,50],escalaPercent);
    
            console.log(translated);
            let shape;
            if (currentShape === 'rectangle') {
                shape = { type: 'rectangle', x: translated[0], y: translated[1], width: escaladoRectangle[0], height: escaladoRectangle[1], angle: angulo };
            } else if (currentShape === 'circle') {
                shape = { type: 'circle', x: translated[0], y: translated[1], radius: escalarCirculo(50,escalaPercent) };
            }
            shapes.push(shape);
            drawShapes();
        });
    
        // Función para dibujar todas las formas en el canvas
        function drawShapes() {
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            shapes.forEach((shape) => {
                ctx.save();
                ctx.beginPath();
                if (shape.type === 'rectangle') {
                    ctx.translate(shape.x + shape.width / 2, shape.y + shape.height / 2);

					//metodo para rotar la figura sobre su propio eje
                    ctx.rotate(shape.angle * Math.PI / 180);

                    ctx.rect(-shape.width / 2, -shape.height / 2, shape.width, shape.height);
                } else if (shape.type === 'circle') {
                    ctx.arc(shape.x, shape.y, shape.radius, 0, Math.PI * 2);
                }
                ctx.fillStyle = 'rgba(0, 100, 255, 0.3)';
                ctx.fill();
                ctx.strokeStyle = 'black';
                ctx.stroke();
                ctx.restore();
            });
        }
    
        // Manejar el botón de limpiar
        clearButton.addEventListener('click', () => {
            shapes = [];
            drawShapes();
        });
    
        // Funciones puras:
    
        // Translacion
        function translaciones(ubicacion, desplazamiento) {
            return [ubicacion[0] + desplazamiento[0], ubicacion[1] + desplazamiento[1]];
        }
    
        // Rotacion
        function rotacion(posicion, angulo) {
            const rad = angulo * Math.PI / 180;
            const cos = Math.cos(rad);
            const sin = Math.sin(rad);
            const x = posicion[0];
            const y = posicion[1];
            return [
                x * cos - y * sin,
                x * sin + y * cos
            ];
        }
    
        // Escala
        function escalarRectangulo(propiedades, porcentaje) {
            var actual = [];
            for (let index = 0; index < propiedades.length; index++) {
                actual[index] = propiedades[index] * (porcentaje / 100);
            }
            return actual;
        }
    
        function escalarCirculo(radio, porcentaje) {
            return radio * (porcentaje / 100);
        }
    </script>
	
</body>
</html>
