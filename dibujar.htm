<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Editor de Canvas</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 20px;
            padding: 0;
        }
        #controls {
            margin-bottom: 20px;
        }
        canvas {
            border: 1px solid black;
            display: block;
            margin: 0 auto;
        }
        .selected {
            border: 2px solid red;
        }
    </style>
</head>
<body>
    <div id="controls">
        <label for="shape">Selecciona una forma:</label>
        <select id="shape">
            <option value="rectangle">Rectángulo</option>
            <option value="circle">Círculo</option>
        </select>
        <button id="clear">Limpiar Canvas</button>
    </div>
	<div id="controls">
		<label for="">Propiedades:</label>
	</div>
	<div>
		<label for="">Ubicación X</label>
		<input type="number" id="translacionX">
		
	</div>
	<div>
		<label for="">Ubicación Y</label>
		<input type="number" id="translacionY">
		
	</div>
	<div>
		<label for="">Inclinación</label>
		<input type="number" id="rotacion" min="0" max="360">
	</div>
	<div>
		<label for="">tamaño</label>
		<input type="number" id="escalado" min="1" >
	</div>
    <canvas id="canvas" width="800" height="600"></canvas>
	<script>
		// Obtener referencias a los elementos
		const canvas = document.getElementById('canvas');
		const ctx = canvas.getContext('2d');
		const shapeSelect = document.getElementById('shape');
		const clearButton = document.getElementById('clear');
	
		// Propiedades de las figuras
		let translacionXInput = document.getElementById("translacionX");
		let translacionYInput = document.getElementById("translacionY");
	
		let translacion = [parseFloat(translacionXInput.value), parseFloat(translacionYInput.value)];
	
		let currentShape = 'rectangle';
		let shapes = [];
		let selectedShapeIndex = null;
	
		// Manejar la selección de formas
		shapeSelect.addEventListener('change', (e) => {
			currentShape = e.target.value;
		});
	
		// Manejar el clic en el canvas para dibujar formas
		canvas.addEventListener('click', (e) => {
			const rect = canvas.getBoundingClientRect();
			const x = e.clientX - rect.left;
			const y = e.clientY - rect.top;
	
			// Actualizar la translación cada vez que se hace clic
			translacion = [parseFloat(translacionXInput.value), parseFloat(translacionYInput.value)];
			
			let xy = translaciones([x, y], translacion);
	
			console.log(xy);
			let shape;
			if (currentShape === 'rectangle') {
				shape = { type: 'rectangle', x: xy[0], y: xy[1], width: 100, height: 50 };
			} else if (currentShape === 'circle') {
				shape = { type: 'circle', x: xy[0], y: xy[1], radius: 50 };
			}
			shapes.push(shape);
			drawShapes();
		});
	
		// Función para dibujar todas las formas en el canvas
		function drawShapes() {
			ctx.clearRect(0, 0, canvas.width, canvas.height);
			shapes.forEach((shape, index) => {
				ctx.beginPath();
				if (shape.type === 'rectangle') {
					ctx.rect(shape.x, shape.y, shape.width, shape.height);
				} else if (shape.type === 'circle') {
					ctx.arc(shape.x, shape.y, shape.radius, 0, Math.PI * 2);
				}
				ctx.stroke();
				ctx.fillStyle = 'rgba(0, 100, 255, 0.3)';
				ctx.fill();
				ctx.strokeStyle = 'black';
				ctx.stroke();
			});
		}
	
		// Manejar el botón de limpiar
		clearButton.addEventListener('click', () => {
			shapes = [];
			drawShapes();
		});
	
		// Funciones puras:
	
		// Translacion
		function translaciones(ubicacion, desplazamiento) {
			var actual = [];
			for (let index = 0; index < ubicacion.length; index++) {
				actual[index] = ubicacion[index] + desplazamiento[index];
			}
			return actual;
		}
	
		// Rotacion
		function rotacion(posicion, angulo) {
			
			const r = Math.sqrt(posicion[0] * posicion[0] + posicion[1] * posicion[1]);
    		const theta = Math.atan2(posicion[1], posicion[0]) * (180 / Math.PI);

			return[r,theta+angulo]
		}
	
		// Escala
		function escalarRectangulo(propiedades, porcentaje) {
			var actual = [];
			for (let index = 0; index < propiedades.length; index++) {
				actual[index] = propiedades[index] * (porcentaje / 100);
			}
			return actual;
		}
	
		function escalarCirculo(radio, porcentaje) {
			return radio * (porcentaje / 100);
		}
	</script>
	
</body>
</html>
